# general-purpose types:

<bool>: "true/false"
<vdir>: up/down
<hdir>: left/right
<direction>: <hdir>/<vdir>
<nextprev>: next/previous

<plural-time-unit>: seconds|minutes|hours|days|weeks|months|years

<duration>: <number> <plural-time-unit>

duration:
    calculate: builtin mode $0
    <number> seconds in seconds: builtin return $0
    <number> minutes in seconds: calculate $0 times 60
    <number> hours in seconds: calculate $0 times 3600

<file>:
    forms: <word>
    completions: find . -maxdepth 1 -type f -printf '%f\n'

<directory>:
    forms: <word>
    completions: find . -maxdepth 1 -type d -printf '%f\n'

# mode map (lets you refer to modes by another name):

<ext-mode>: <mode>|edit|web|mail|terminal|shell|cluster|container
mode-map:
    <mode>: builtin mode $0
    edit: vim
    web: firefox
    mail: thunderbird
    terminal: urxvt
    shell: zsh
    cluster: kubectl
    container: docker

# control structures

control ():
    auto-enable: { always: True }

    <number> times <command>: ~builtin

    if true <command> else <command>: $2
    if false <command> else <command>: $4
    if <bool> <command>: if $1 $2 else {}

    start dictation|dictating: builtin set dictation true
    stop dictation|dictating: builtin set dictation false

    false or false: builtin return false
    true or <bool>: builtin return true
    <bool> or true: builtin return true

    word <word> is among <word>: builtin $1 equals $4
    word <word> is among <word> <word>+: $(builtin $1 equals $4) or $(word $1 is among $5)

    stop/silence/enough already/shut the fuck up/let me be:
        stop dictation
        builtin mode default

    thank you: thank-you-reply $( builtin randomint 4 ) ; stop
    thank-you-reply 0: computer say no problem
    thank-you-reply 1: computer say my pleasure
    thank-you-reply 2: computer say sure thing
    thank-you-reply 3: computer say any time

# main modes:

default (): # the () specifies an empty prompt string, meaning 'omit this mode from the prompt'
    auto-enable:
        always: True
        built-ins: False # don't recognize so-called 'global built-ins' (e.g. 'options')
    computer|focus: builtin mode $0
    <screen>: focus $0

computer (comp): # general commands
    <ext-mode>: ~mode-map
    print <word>+/press <key>+/run <word>+/text <word>+: ~builtin
    press <number> times <key>+: $1 times press $3
    press <key> <number> times: $2 times press $1
    restart commander/shutdown commander/jobs/mode <mode>/window processes: ~builtin
    change commands: in new terminal run vim "$configdir/modes.yaml"
    change replacements: in new terminal run vim "$configdir/replacements.yaml"
    kill <job>: builtin cancel job $1
    sleep seconds <number>: builtin execute sleep $2
    sleep <duration>: sleep seconds $(duration $1 in seconds)

    # ways to run things:
    in <duration> <command>: builtin asynchronously sleep $1 $2
    in new terminal run <word>+: run urxvt -e $4
    in new shell run <word>+: in new terminal run zsh --interactive -c "$4"
    in background shell run|execute <word>+: builtin $3 zsh -c "$4"

    # specific applications to run
    calendar: run orage
    job tree: in new shell run ps fax | less
    live jobs: in new shell run top
    say <word>+: in background shell execute echo "$1" | festival --tts
    screen grab: run flameshot gui
    door: run cctv
    new browser: run firefox ; web
    new terminal: run urxvt ; terminal
    what time is it/what's the time: in background shell execute date +%R | festival --tts

    if in shell <command> else <command>:
        if $(word zsh is among $(builtin get active modes)) $3 else $5

    # file ops:
    modify <file>:
        if in shell { text vim "$1" ; press enter }
        else in new terminal run vim "$1"
    delete file <file>:
        if in shell { text rm "$2" ; press enter }
        else run rm "$2"
    show files:
        if in shell { text ls -l ; press enter }
        else { in new shell run unset LESS; ls -l | less -r }
    tree:
        if in shell { text tree ; press enter }
        else { in new shell run unset LESS; tree | less -r }

    # vcs:
    status of version:
        if in shell { text git -c color.status=always status ; press enter }
        else { in new shell run unset LESS; git -c color.status=always status | less -r }
    make patch:
        if in shell { text git commit ; press enter }
        else in new terminal run git commit
    index file <file>:
        if in shell { text git add $2 ; press enter }
        else in new terminal run git add $2
    revisions: run gitk

<screen>: mexico/germany/india
    # the order here matters, because 'focus <screen>' passes the enumindex to the wm
<wm-object>: window/tab/frame/screen/work space
<target>:
    - <direction>
    - <screen>
    - frame <number>
    - <nextprev> <wm-object>
    - new work space
    - <number> times <direction>
    - <direction> <number> times

focus: # wm commands
    press <word>+: ~computer
    <mode>: builtin mode $0

    mark: press wmkey d
    attach: press wmkey a
    change <target>: mark { $1 } attach
    close: press wmkey c
    kill: press wmkey c
    split <direction>: press wmkey s $1
    join: press wmkey v
    maximize: press wmkey enter

    # targets: (these can be used with 'change' defined above to move the window to the target)
    <direction>: press wmkey $0
    <direction> <number> times: $1 times $0
    <screen>: press wmkey y $(builtin enumindex screen $0)
    frame <number>: press wmkey j $1
    next window: press wmkey tab
    previous window: press wmkey shift tab
    next work space: press wmkey pagedown
    previous work space: press wmkey pageup
    new work space: press wmkey w

# applications:

top:
    auto-enable: { for-applications: top }
    press <word>+: ~computer
    finish: press q

less:
    auto-enable: { for-applications: less }
    press <word>+: ~computer
    page <vdir>: press page$1
    finish: press q
    find: press slash

thunderbird (mail):
    auto-enable: { for-applications: thunderbird }
    text <word>+: ~builtin
    press <word>+: ~computer
    home|delete|escape|<vdir>: press $0
    next: press f
    select <number>: keydown shift  press $1 times down ; press up ; keyup shift
    <number> <direction>: press $0 times $1

firefox-navigate:
    <number>: builtin text $0 ; builtin mode firefox
    go: builtin press enter

firefox (web):
    auto-enable: { for-applications: firefox firefox-bin }
    text <word>+: ~builtin
    press <word>+: ~computer
    home|escape|delete|<direction>|space: press $0
    erase: press shift home delete
    small: press control 0
    bigger: press control 0 ; press 6 times control shift =
    finish: press control w
    find <word>: press control f ; text $1
    back: press backspace
    location: press f6
    go: press escape f ; builtin mode firefox-navigate
    refresh: press f5
    fresh: press f5
    forward: todo
    copy: press control c
    paste: press control v
    start of page: press home
    end of page: press end
    page <vdir>: press page$1
    <number> pages <vdir>: press $0 times page$2
    fresh: press control t
    previous: press control pageup
    next: press control pagedown

vim-find:
    text <word>+: ~builtin
    press <word>+: ~computer
    slash|backspace: press $0
    go: press enter ; builtin mode vim
    escape: press escape ; builtin mode vim
    cancel: escape
    delete last word: press control w
    correction: delete last word

vim-insert:
    text <word>+: ~builtin
    press <word>+: ~computer
    slash/space/semicolon/backspace/period/dollar/percent/colon: press $0
    single|double quote: press "$0 $1"
    escape: press escape ; builtin mode vim
        # text is not in edit itself because in view mode, entering a textual word makes no sense
    delete last word: press control w
    correction: delete last word
    finish:
        press escape ;
        builtin keydown shift ;  builtin text zz ; builtin keyup shift ;
        builtin mode computer

vim:
    auto-enable: { for-applications: vim }
    press <word>+: ~computer
    submode <word>: builtin mode vim-$1
    escape|delete|enter|<direction>: press $0
    page <vdir>: press page$1
    undo: press escape u
    sorry: undo
    redo: press escape control r
    save: press control s
    find <word>: press escape slash ; builtin text $1 ; submode find
    find: press escape slash ; submode find
    delete word: builtin text dw
    delete line: builtin text dd
    <number> <direction>: press $0 times $1
    copy <number>: select $1  press control c
    paste <number>: go $1  press control v
    select <number>: escape  press shift v ; builtin text $1 ; press shift g
    start of file: press escape g g
    end of file: press escape shift g
    start of line: press home
    end of line: press end
    next word: press w
    previous word: press b
    delete last word: previous word delete word
    next line: press down
    previous line: press up
    new line: press o ; submode insert
    go <number>: escape  builtin text $1 ; press shift g
    next buffer: escape  press control end
    previous buffer: escape  press control home
    next match: escape  press n
    previous match: escape  press shift n
    finish: escape  builtin keydown shift  builtin text zz ; builtin keyup shift
    refresh: press control l
    insert: press insert ; submode insert

vlc:
    auto-enable: { for-applications: vlc }
    press <word>+: ~computer
    full screen: press f
    finish: press control q

zsh (shell):
    auto-enable: { for-leaf-applications: zsh }
    text <word>+: ~builtin
    press <word>+: ~computer
    do it: press enter
    again: press up enter
    page <vdir>: press shift page$1
    finish: press control d
    change directory <directory>: text cd $2 ; press enter
    directory up: text cd .. ; press enter
    directory back: text cd - ; press enter
    history: text history ; press enter
    execute <number>: text "!$1" ; press enter
    delete last word: press control w
    correction: delete last word
    <direction>|space: press $0
    erase: press control u
    status of version/make patch/index file <file>: ~computer
    show files/modify <file>/tree: ~computer
    clear screen: press control l

urxvt (term):
    auto-enable: { for-applications: urxvt }
    press <word>+: ~computer
    zoom in: press control plus # needs to be enabled in urxvt config
    zoom out: press control minus
    magnify: zoom in

gitk:
    auto-enable: { for-suffixes: ['- gitk'] }
    press <word>+: ~computer
    <vdir>: press $0
    <number> <vdir>: press $0 times $1
    change <target>: focus change $1
    finish: press control q

sound:
    playback: builtin run pavucontrol --tab 1
    recording: builtin run pavucontrol --tab 2
    output devices: builtin run pavucontrol --tab 3
    input devices: builtin run pavucontrol --tab 4
    # todo: louder, mute, etc

python-repl (python):
    auto-enable: { for-leaf-applications: python3 }
    press <word>+: ~computer
    finish: press control d

docker:
    list: computer in new shell run unset LESS; docker ps | less -r

orage:
    auto-enable: { for-applications: orage }
    press <word>+: ~computer
    finish: press control q

<kube-obj-type>: pod|node|service|deployment

<kubeobjs>: pods|nodes|services|deployments

<kube-deployment>:
    forms: <word>
    completions: kubectl get deployments -o custom-columns=name:metadata.name --no-headers=true

<kube-service>:
    forms: <word>
    completions: kubectl get services -o custom-columns=name:metadata.name --no-headers=true

<kube-node>:
    forms: <word>
    completions: kubectl get nodes -o custom-columns=name:metadata.name --no-headers=true

<kube-pod>:
    forms: <word>
    completions: kubectl get pods -o custom-columns=name:metadata.name --no-headers=true

<kube-object>:
    - node <kube-node>
    - service <kube-service>
    - pod <kube-pod>
    - deployment <kube-deployment>

kubectl:
    computer: builtin mode $0
    get|describe|delete <kube-object>: computer in new shell run "unset LESS; kubectl $0 $1 $2 | less"

arith-demo:
    print <word>+/return <word>: ~builtin
    # here, just for fun, we build arithmetic from +1 and -1.
    # this is currently too slow to be useful though, so elsewhere
    # we use built-ins.

    increment <number>: builtin $1 plus 1
    decrement <number>: builtin $1 minus 1

    <number> minus 0: return $0
    0 minus <number>: return 0
    <number> minus <number>: decrement $($0 minus $(decrement $2))

    <number> plus 0: return $0
    0 plus <number>: return $2
    <number> plus <number>: increment $($0 plus $(decrement $2))

    0 times <number>: return 0
    <positive> times <number>: $2 plus $($2 times $(decrement $0))

    <number> is less than 0: return false
    0 is less than <positive>: return true
    <number> is less than <positive>: $(decrement $0) is less than $(decrement $4)

    fibonacci 0: return 0
    fibonacci 1: return 1
    fibonacci <number>: $(fibonacci $($1 minus 1)) plus $(fibonacci $($1 minus 2))

    0 times <command>: '{}'
    <positive> times <command>: $(builtin $0 minus 1) times $2 ; $2
    # this works just like the builtin "times" command, but handles only a couple
    # hundred iterations because the recursion translates directly into python recursion.

bad-aliases:
    undefined variable: builtin print $nope
    wrapper: undefined variable

<order>:
    - is less|greater than
    - is equal|unequal to

<arith-binop>: plus|minus|times

calculate (calc):
    print <word>+/return <word>/<number> <arith-binop>|<order> <number>: ~builtin
    if <bool> <command> else <command>: ~control

    make <word> <word>: builtin set $1 $2
    value of <word>: builtin get $2
    increase <word> by <number>: make $1 $($(value of $1) plus $3)
    increment <word>: increase $1 by 1

    maximum of <number> and <number>: if $($2 is less than $4) return $4 else return $2
    minimum of <number> and <number>: if $($2 is less than $4) return $2 else return $4

ktorrent:
    auto-enable: { for-applications: ktorrent }
    press <word>+: ~computer
    delete download: press control delete
