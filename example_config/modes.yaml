# general-purpose types:

<vdir>: up/down
<hdir>: left/right
<direction>: <hdir>/<vdir>
<nextprev>: next/previous

<duration>:
    - <number> seconds
    - <number> minutes
    - <number> hours

duration:
    calculate: builtin mode $0
    <number> seconds in seconds: builtin return $0
    <number> minutes in seconds: calculate $0 times 60
    <number> hours in seconds: calculate $0 times 3600

# mode map (lets you refer to modes by another name):

<ext-mode>: <mode>|edit|web|mail|terminal|shell|cluster
mode-map:
    mode <ext-mode>: builtin mode $($1)
    return <ext-mode>: builtin return $1

    <mode>: return $0
    edit: return vim
    web: return firefox
    mail: return thunderbird
    terminal: return urxvt
    shell: return zsh
    cluster: return kubectl

# control structures

control ():
    auto-enable: { always: True }
    _rep-impl-f 0 <word>: builtin nop
    _rep-impl-f <number> <word>: _rep-impl-f $(builtin $1 minus 1) "$2" $2
    <number> times <command>: _rep-impl-f $0 "builtin mode $2 $3"

# main modes:

default (): # the () specifies an empty prompt string, meaning 'omit this mode from the prompt'
    auto-enable:
        always: True
        other-modes: False # if default mode is the current mode, don't enable other modes
        built-ins: False # don't recognize so-called 'global built-ins' (e.g. 'options')
    computer|focus: builtin mode $0
    <screen>: focus $0
    stop: builtin mode default

computer (comp): # general commands
    <ext-mode>: builtin mode mode-map mode $0
    print <word>/press <keys>: builtin $*
    restart commander/shutdown commander/jobs/mode <mode>/window processes: builtin $*
    change commands: in new terminal run vim "$configdir/modes.yaml"
    change replacements: in new terminal run vim "$configdir/replacements.yaml"
    kill <job>: builtin cancel job $1
    simple run <word>: builtin run $2 # only consumes one argument, so can be followed by more commands
    sleep seconds <number>: builtin execute sleep $2
    sleep <duration>: sleep seconds $(duration $1 in seconds)
    in <duration> <command>: builtin asynchronously sleep $1 $2 $3
    new browser: simple run firefox mode firefox
    new terminal: simple run urxvt mode urxvt
    screen grab: builtin run flameshot gui
    door: builtin run cctv
    in new terminal run <words>: builtin run urxvt -e $4
    in new shell run <words>: in new terminal run zsh --interactive -c "$4"
    in background shell run|execute <words>: builtin $3 zsh -c "$4"
    calendar: builtin run orage
    job tree: in new shell run ps fax|less
    live jobs: in new shell run top
    say <words>: in background shell execute echo "(SayText \"$1\")" | festival

<screen>: sheffield/manchester/liverpool
    # the order here matters, because 'focus <screen>' passes the enumindex to the wm
<wm-object>: window/tab/frame/screen/work space
<target>:
    - <direction>
    - <screen>
    - frame <number>
    - <nextprev> <wm-object>
    - new work space

focus: # wm commands
    press <keys>: builtin $*
    <mode>: builtin mode $0

    mark: press wmkey+d
    attach: press wmkey+a
    change <target>: mark $1 attach
    close: press wmkey+c
    kill: press wmkey+c
    split <direction>: press wmkey+s,$1
    join: press wmkey+v
    maximize: press wmkey+enter

    # targets: (these can be used with 'change' defined above to move the window to the target)
    <direction>: press wmkey+$0
    <screen>: press wmkey+y press $(builtin enumindex screen $0)
    frame <number>: press wmkey+j,$1
    next window: press wmkey+tab
    previous window: press wmkey+shift+tab
    next work space: press wmkey+pagedown
    previous work space: press wmkey+pageup
    new work space: press wmkey+w

# applications:

top:
    auto-enable: { for-applications: top }
    press <keys>: builtin $*
    finish: press q

less:
    auto-enable: { for-applications: less }
    press <keys>: builtin $*
    page <vdir>: press page$1
    finish: press q
    find: press slash

thunderbird:
    auto-enable: { for-applications: thunderbird }
    home|delete|escape|<vdir>: builtin press $0
    next: builtin press f
    select <number>: keydown shift  press $1*down,up  keyup shift
    <number> <direction>: builtin press $0*$1

firefox-navigate:
    <number>: builtin text $0  builtin mode firefox
    go: builtin press enter

firefox:
    auto-enable: { for-applications: firefox firefox-bin }
    press <keys>/text <word>: builtin $*
    home|escape|delete|<direction>|space: builtin press $0
    erase: press shift+home,delete
    small: press ctrl+0
    bigger: press ctrl+0,6*ctrl+shift+=
    finish: press ctrl+w
    find <word>: press ctrl+f  text $1
    back: press backspace
    location: press f6
    go: press escape,f  builtin mode firefox-navigate
    refresh: press f5
    fresh: press f5
    forward: todo
    copy: press ctrl+c
    paste: press ctrl+v
    start of page: press home
    end of page: press end
    page <vdir>: press page$1
    <number> pages <vdir>: press $0*page$2
    fresh: press ctrl+t
    previous: builtin press ctrl+pageup
    next: builtin press ctrl+pagedown

vim-find:
    slash|backspace: builtin press $0
    text <word>/press <keys>: builtin $*
    go: builtin press enter  builtin mode vim
    escape: builtin press escape  builtin mode vim
    cancel: escape
    delete word: builtin press ctrl+w

vim-insert:
    slash|space|semicolon|backspace|period|dollar|percent|colon: builtin press $0
    escape: builtin press escape  builtin mode vim
        # text is not in edit itself because in view mode, entering a textual word makes no sense
    text <word>: builtin $*

vim:
    auto-enable: { for-applications: vim }
    submode <word>: builtin mode vim-$1
    press <keys>: builtin $*
    escape|delete|enter|<direction>: builtin press $0
    page <vdir>: press page$1
    undo: press escape,u
    sorry: undo
    redo: press escape,ctrl+r
    save: press ctrl+s
    find <word>: press escape,slash builtin text $1 submode find
    find: press escape,slash submode find
    delete word: builtin text dw
    <number> <direction>: builtin press $0*$1
    copy <number>: select $1  press ctrl+c
    paste <number>: go $1  press ctrl+v
    select <number>: escape  press shift+v  text $1  press shift+g
    start of file: press escape,g,g
    end of file: press escape,shift+g
    start of line: press home
    end of line: press end
    next word: press w
    previous word: press b
    new line: press o  submode insert
    go <number>: escape  builtin text $1  press shift+g
    next buffer: escape  press ctrl+end
    previous buffer: escape  press ctrl+home
    next match: escape  press n
    previous match: escape  press shift+n
    finish: escape  builtin keydown shift  builtin text zz  builtin keyup shift
    refresh: press ctrl+l
    insert: press insert  submode insert

vlc:
    auto-enable: { for-applications: vlc }
    press <keys>: builtin $*
    full screen: press f
    finish: press ctrl+q

zsh:
    auto-enable: { for-leaf-applications: zsh }
    text <word>/press <keys>: builtin $*
    do it: press enter
    again: press up,enter
    page <vdir>: press shift+page$1
    finish: press ctrl+d
    change directory <word>: text "cd $2" press enter
    directory up: text "cd .." press enter
    directory back: text "cd -" press enter
    revisions: text "gitk" press enter
    history: text history  press enter
    execute <number>: text !$1
    delete word: builtin press ctrl+w
    <direction>|space: builtin press $0
    erase: press ctrl+u

urxvt:
    auto-enable: { for-applications: urxvt }
    press <keys>: builtin $*

gitk:
    auto-enable: { for-suffixes: ['- gitk'] }
    press <keys>: builtin $*
    <vdir>: press $0
    <number> <vdir>: press $0*$1
    change <target>: focus change $1
    kill: press ctrl+q
    finish: kill

orage:
    auto-enable: { for-applications: orage }
    press <keys>: builtin $*
    finish: press ctrl+q

<kube-obj-type>: pod|node|service|deployment

<kubeobjs>: pods|nodes|services|deployments

<kube-deployment>:
    forms: <word>
    completions: kubectl get deployments -o custom-columns=name:metadata.name --no-headers=true

<kube-service>:
    forms: <word>
    completions: kubectl get services -o custom-columns=name:metadata.name --no-headers=true

<kube-node>:
    forms: <word>
    completions: kubectl get nodes -o custom-columns=name:metadata.name --no-headers=true

<kube-pod>:
    forms: <word>
    completions: kubectl get pods -o custom-columns=name:metadata.name --no-headers=true

<kube-object>:
    - node <kube-node>
    - service <kube-service>
    - pod <kube-pod>
    - deployment <kube-deployment>

kubectl:
    computer: builtin mode $0
    get|describe|delete <kube-object>: computer in new shell run "unset LESS; kubectl $0 $1 $2 | less"

arith-demo:
    print <word>/return <word>: builtin $*
    # here, just for fun, we build arithmetic from +1 and -1.
    # this is currently too slow to be useful though, so elsewhere
    # we use built-ins.

    increment <number>: builtin $1 plus 1
    decrement <number>: builtin $1 minus 1

    <number> minus 0: return $0
    0 minus <number>: return 0
    <number> minus <number>: decrement $($0 minus $(decrement $2))

    <number> plus 0: return $0
    0 plus <number>: return $2
    <number> plus <number>: increment $($0 plus $(decrement $2))

    0 times <number>: return 0
    <number> times <number>: $2 plus $($2 times $(decrement $0))

    <number> is less than 0: return false
    0 is less than <number>: return true
    <number> is less than <number>: lth $4 $(decrement $0)
    lth <number> <number>: $2 is less than $(decrement $1)

    fibonacci 0: return 0
    fibonacci 1: return 1
    fibonacci <number>: $(fibonacci $($1 minus 1)) plus $(fibonacci $($1 minus 2))

calculate (calc):
    print <word>/return <word>/<number> plus|minus|times <number>: builtin $*
    <number> is less|greater than <number>: builtin $*

    make <word> <word>: builtin set $1 $2
    value of <word>: builtin get $2
    increase <word> by <number>: make $1 $($(value of $1) plus $3)
    increment <word>: increase $1 by 1

    <number> or <number> depending on whether true: return $0
    <number> or <number> depending on whether false: return $2

    maximum of <number> and <number>:
        $4 or $2 depending on whether $($2 is less than $4)
    minimum of <number> and <number>:
        $2 or $4 depending on whether $($2 is less than $4)
