#!/usr/bin/env python3

import os
import subprocess
import sys
import itertools
import time
import fileinput
import pyautogui # better than pynput because pynput doesn't let you send mod+letter
import yaml
import collections
import psutil
import asyncio
import shutil
import inspect
from termcolor import colored
from ctypes import *
from contextlib import contextmanager
import click

os.environ['PYGAME_HIDE_SUPPORT_PROMPT'] = "hide"
import pygame # apt-get install python-pygame

sound_effects = True
idle_mode = 'stopped'
mode = idle_mode
modes = {idle_mode:{}}
numbers = {}
word_replacements = {}
enums = {}
ignore = ["i", "of", "the", "if"]
current_windowpid = ''
current_windowtitle = ''
current_windowprocesses = {}
debug = False

extra_key_names = {
    'space': ' ',
    'dollar': '$',
    'ampersand': '&',
    'hash': '#',
    'percent': '%',
    'period': '.',
    'comma': ',',
    'slash': '/',
    'wmkey': 'winleft'
}

short_mode_names = {}

configdir = os.getenv('HOME') + '/.evc-voice-controller'

auto_enable_for_applications = {}
auto_enable_for_leaf_applications = {}
auto_enable_for_suffixes = {}
auto_enable_for_prefixes = {}
builtins_enabled = {}
global_modes = []

global_builtins = ['stop', 'options', 'define', 'builtin', 'times']
    # this order is also used for display to humans

def load_config():
    global word_replacements, numbers, modes, enums, short_mode_names, builtins_enabled, global_modes
    global auto_enable_for_applications
    global auto_enable_for_leaf_applications
    global auto_enable_for_suffixes
    global auto_enable_for_prefixes
    short_mode_names = {}
    auto_enable_for_applications = {}
    auto_enable_for_leaf_applications = {}
    auto_enable_for_suffixes = {}
    auto_enable_for_prefixes = {}
    builtins_enabled = {}
    global_modes = []
    try:
        with open(configdir + '/replacements.yaml', 'r') as stream:
            word_replacements = yaml.safe_load(stream)
        with open(configdir + '/numbers.yaml', 'r') as stream:
            numbers = yaml.safe_load(stream)
        with open(configdir + '/modes.yaml', 'r') as stream:
            modes = yaml.safe_load(stream)
        with open(configdir + '/enums.yaml', 'r') as stream:
            enums = yaml.safe_load(stream)

        for mode, aliases in modes.items():
            if 'short-name' in aliases:
                short_mode_names[mode] = aliases['short-name']
                del aliases['short-name']
            if 'auto-enable-for-applications' in aliases:
                auto_enable_for_applications[mode] = aliases['auto-enable-for-applications'].split()
                del aliases['auto-enable-for-applications']
            if 'auto-enable-for-leaf-applications' in aliases:
                auto_enable_for_leaf_applications[mode] = aliases['auto-enable-for-leaf-applications'].split()
                del aliases['auto-enable-for-leaf-applications']
            if 'auto-enable-for-prefixes' in aliases:
                auto_enable_for_prefixes[mode] = aliases['auto-enable-for-prefixes']
                del aliases['auto-enable-for-prefixes']
            if 'auto-enable-for-suffixes' in aliases:
                auto_enable_for_suffixes[mode] = aliases['auto-enable-for-suffixes']
                del aliases['auto-enable-for-suffixes']
            builtins_enabled[mode] = global_builtins.copy()
            if 'enable-builtins' in aliases:
                builtins_enabled[mode] += aliases['enable-builtins'].split()
                del aliases['enable-builtins']
            if 'global-mode' in aliases:
                if aliases['global-mode']:
                    global_modes.append(mode)
                del aliases['global-mode']

        for mode, aliases in modes.items():
            aliases['|'.join(global_modes)] = 'builtin switch $0'

    except Exception as e:
        print("\nerror loading config:", e)

def key_by_name(name):
    return (extra_key_names[name] if name in extra_key_names else name)

# built-in commands:

def is_global_builtin_pattern(pat):
    pat = pat.split()
    while pat != [] and pat[0][0] == '<':
        pat = pat[1:]
    return pat != [] and pat[0] in global_builtins

def is_keyname(s):
    return s in pyautogui.KEYBOARD_KEYS or s in extra_key_names

def is_keyspec(spec):
    all_keys = pyautogui.KEYBOARD_KEYS + list(extra_key_names.keys())
    for combo in spec.split(','):
        mult = combo.find('*')
        if mult != -1:
            if not combo[:mult].isdigit(): return False
            combo = combo[mult+1:]
        for k in combo.split('+'):
            if not is_keyname(k): return False
    return True

builtin_commands = {}

def make_builtin(pattern):
    def f(g):
        builtin_commands[pattern] = g
        return g
    return f

def action(cmd, mode):
    _, _, acts, _ = process(list(cmd), mode)
    def combined():
        for f, w in acts: f(*w)
    return combined

@make_builtin('<number> times <command>')
def cmd_times(n, _, *cmd):
    a = action(cmd, mode)
    for i in range(int(n)): a()

@make_builtin('stop')
def cmd_stop(_):
    global mode
    mode = idle_mode

@make_builtin('run <word>')
def cmd_run(_, cmd):
    subprocess.Popen(cmd, shell=True,
        stdin=subprocess.PIPE,
        stdout=subprocess.PIPE,
        stderr=subprocess.PIPE)

@make_builtin('execute <word>')
def cmd_execute(_, cmd):
    output = subprocess.Popen(cmd, shell=True,
        stdin=subprocess.PIPE,
        stdout=subprocess.PIPE,
        stderr=subprocess.PIPE).stdout.read().decode('utf-8').strip()
    cmd_print('print', output)

@make_builtin('restart')
def cmd_restart(_):
    os.execl(sys.argv[0], *sys.argv)

@make_builtin('keydown <key>')
def press_key(_, key_name):
    pyautogui.keyDown(key_by_name(key_name))

@make_builtin('keyup <key>')
def release_key(_, key_name):
    pyautogui.keyUp(key_by_name(key_name))

@make_builtin('nop')
def cmd_nop(_):
    pass

@make_builtin('shutdown')
def cmd_exit(_):
    sys.stdout.write("\033[?25h") # restore cursor
    sys.exit(0)

@make_builtin('define <command>')
def cmd_define(_, *cmd):
    for m in [mode] + [m for m in modes if m != mode and mode_is_auto_enabled(m)]:
        for pattern in modes[m].keys():
            matched, bad, _ = params_matched(pattern.split(), list(cmd), mode)
            if matched > 0 and not bad:
                print_definition(m, pattern)
                return
    for pattern, _ in builtin_commands.items():
        matched, bad, _ = params_matched(pattern.split(), list(cmd), mode)
        if matched > 0 and not bad:
            print_builtin(pattern)

@make_builtin('options')
def cmd_options(_):
    mm = [mode]
    if mode != idle_mode:
        mm += [m for m in modes if m != mode and mode_is_auto_enabled(m)]
    print()
    builtins_displayed = []
    for m in mm:
        indent = len(m) + len("in : ")
        l = []
        simples = []
        for pat, exp in modes[m].items():
            if pat == '|'.join(global_modes): continue
            if exp == 'builtin press $0':
                if len(pat.split()) == 1:
                    for alt in pat.split('|'):
                        simples.append((alt + ', ', len(alt) + 2))
                else:
                    simples.append((pat + ', ', len(pat) + 2))
            else:
                l.append((color_commands(pat) + ', ', len(pat) + 2))
        l += simples
        for builtin in builtin_commands.keys():
            if is_global_builtin_pattern(builtin): continue
            cmd, *_ = builtin.split()
            if cmd in builtins_enabled[m] and cmd not in builtins_displayed:
                builtins_displayed.append(cmd)
                l.append((builtin + ', ', len(builtin) + 2))
        for pat, exp in modes[m].items():
            if pat in modes and pat != m and exp == 'builtin switch ' + pat:
                l.append((color_mode(pat) + ', ', len(pat) + 2))
        if l != []:
            print('in', color_mode(m) + ': ', end='')
            (s, w) = l[-1]; l[-1] = (s[:-2], w - 2) # remove last comma
            print(indented_and_wrapped(l, indent), end='\n\n')

    l = ([(color_mode(m) + ', ', len(m) + 2) for m in global_modes if m not in mm] +
         [(builtin + ', ', len(builtin) + 2) for builtin in builtin_commands.keys() if is_global_builtin_pattern(builtin)])

    if l != []:
        print('global: ', end='')
        indent = len('global: ')
        (s, w) = l[-1]; l[-1] = (s[:-2], w - 2) # remove last comma
        print(indented_and_wrapped(l, indent), end='\n\n')

@make_builtin('text <word>')
def cmd_text(_, s):
    pyautogui.press([c for c in s])

@make_builtin('switch <mode>')
def cmd_switch_mode(_, m):
    global mode
    mode = m

@make_builtin('press <keys>')
def cmd_press(_, spec):
    for combo in spec.split(','):
        times = 1
        mult = combo.find('*')
        if mult != -1:
            times = int(combo[:mult])
            combo = combo[mult+1:]
        keys = combo.split('+')
        if len(keys) == 1:
            k = key_by_name(keys[0])
            pyautogui.press([k] * times)
        else:
            for i in range(times):
                for k in keys: press_key('press', k)
                time.sleep(0.05)
                for k in reversed(keys): release_key('release', k)

@make_builtin('print <word>')
def cmd_print(_, s):
    print(colored(s, 'magenta'))

# command evaluation:

builtin_types = {
    'word': lambda _: True,
    'number': lambda s: s.isdigit(),
    'key': is_keyname,
    'keys': is_keyspec,
    'mode':
        lambda m: m in modes.keys()
}

def param_matched(param, arg, i):
    for alt in param.split('|'):
        if alt == arg: return (True, [])
        for type, pred in builtin_types.items():
            if alt == '<' + type + '>' and pred(arg):
                return (True, [])
        for e in enums:
            if alt == '<' + e + '>':
                enumerators = enums[e].split()
                if arg in enumerators:
                    return (True, [('enumindex' + str(i), str(enumerators.index(arg)))])
    return (False, [])

def params_matched(params, args, mode):
    vars = []
    params_matched = 0
    args_matched = 0
    for i in range(len(params)):
        if i == len(args): break
        if params[i] == '<command>':
            matched, b, _, _ = process(args[args_matched:], mode, True, True)
            args_matched += matched
            if b: break
        else:
            b, v = param_matched(params[i], args[i], i)
            if not b: break
            vars += v
            args_matched += 1
        params_matched += 1
    bad = (params_matched != len(params))
    return (args_matched, bad, vars)

def pstree_branch(pids, names, children):
    r = {}
    for pid in pids:
        name = (names[pid] if pid in names else '?')
        b = (pstree_branch(children[pid], names, children) if pid in children else {})
        b['name'] = name
        r[pid] = b
    return r

def process_family(pid):
    children = collections.defaultdict(list)
    names = {}
    for p in psutil.process_iter():
        try:
            children[p.ppid()].append(p.pid)
            names[p.pid] = p.name()
        except (psutil.NoSuchProcess, psutil.ZombieProcess):
            pass
    start = [pid]
    return pstree_branch(start, names, children)

def occurs_in_branch(x, processes):
    for k, v in processes.items():
        if k == 'name':
            if v == x: return True
        elif occurs_in_branch(x, v):
            return True
    return False

def occurs_as_leaf_in_branch(x, processes):
    if len(processes) == 1 and 'name' in processes and processes['name'] == x:
        return True
    for k, v in processes.items():
        if k != 'name' and occurs_as_leaf_in_branch(x, v):
            return True
    return False

def mode_is_auto_enabled(m):
    aliases = modes[m]
    if m in auto_enable_for_applications:
        for app in auto_enable_for_applications[m]:
            if occurs_in_branch(app, current_windowprocesses):
                return True
    if m in auto_enable_for_leaf_applications:
        for app in auto_enable_for_leaf_applications[m]:
            if occurs_as_leaf_in_branch(app, current_windowprocesses):
                return True
    if m in auto_enable_for_prefixes:
        for prefix in auto_enable_for_prefixes[m]:
            if current_windowtitle.startswith(prefix):
                return True
    if m in auto_enable_for_suffixes:
        for suffix in auto_enable_for_suffixes[m]:
            if current_windowtitle.endswith(suffix):
                return True
    return False

def get_active_modes(mode):
    r = [mode]
    if mode != idle_mode:
        for m in modes:
            if m != mode and mode_is_auto_enabled(m):
                r.append(m)
    return r

def color_commands(p):
    return colored(p, 'magenta')

def color_mode(m):
    return colored(m, 'cyan')

def split_expansion(s):
    if s == '': return []
    if s[0] == '"':
        close = s[1:].find('"') + 1
        # todo: handle close == -1
        x = s[1:close]
        if close+1 == len(s): return [x]
        # todo: handle s[close+1]!=' '
        afterspace = close+1
        while s[afterspace] == ' ': afterspace += 1
        return [x] + split_expansion(s[afterspace:])
    space = s.find(' ')
    if space == -1: return [s]
    afterspace = space + 1
    while afterspace < len(s) and s[afterspace] == ' ': afterspace += 1
    return [s[:space]] + split_expansion(s[afterspace:])

def longest_matching_pattern(patterns, input, mode):
    # if multiple patterns match equally well, the first one of them is returned
    # (this is important because it's how commands in the current mode
    #  override commands in auto-enabled modes)

    longest = 0
    vars = None
    bad = False
    pattern = None
    result = None

    if debug:
        print("finding longest pattern matching", input, "among", [p for p, _ in patterns])

    for p, r in patterns:
        params = p.split()
        matched, b, v = params_matched(params, input, mode)
        if matched > longest:
            longest = matched
            bad = b
            if not bad:
                pattern = p
                result = r
                vars = v

    if debug:
        print("best match (" + str(longest) + "):", pattern, " bad:", bad)

    return (longest, vars, bad, pattern, result)

def handle_alias(input, current_mode, include_autoenabled):
    enabled_modes = [current_mode]
    if include_autoenabled and current_mode != idle_mode:
        enabled_modes += [m for m in modes if m != current_mode and mode_is_auto_enabled(m)]

    patterns = [(pat, (m, exp)) for m in enabled_modes for pat, exp in modes[m].items()]

    longest, vars, bad, pattern, r = longest_matching_pattern(patterns, input, current_mode)

    acts = []
    newmode = current_mode
    if longest != 0 and not bad:
        m, expansion = r

        exp = split_expansion(expansion)
        vars += [(str(i), w) for i, w in enumerate(input[:longest])]
        vars.append(('windowpid', current_windowpid))
        vars.append(('windowtitle', current_windowtitle))
        for varname, varvalue in vars:
            exp = [tok.replace('$' + varname, varvalue) for tok in exp]

        matched, bad, a, m = process(exp, m, True, False)
        if not bad:
            acts = a
            newmode = m
        else:
            print(colored('\nerror: bad alias:', 'red'),
                  color_mode(m) + ' ' + color_commands(pattern) + ':',
                  color_commands(expansion))

    return (longest, bad, acts, newmode)

def print_builtin(pattern):
    func = builtin_commands[pattern]
    print('\n' + color_commands(pattern), '= ', end='')
    lines = inspect.getsource(func).split('\n')
    while lines != [] and lines[-1] == '':
        lines = lines[:-1]
    if lines != [] and lines[0].startswith('@make_builtin'):
        lines = lines[1:]
    if len(lines) == 1:
        print(lines[0].strip().rstrip(','))
    else:
        print('\n' + '\n'.join(map(lambda s: '    ' + s, lines)), end = '\n\n')

def handle_builtin_command(input, mode, include_autoenabled, only_enabled=True):
    patterns = []
    for pat, f in builtin_commands.items():
        cmd, *_ = pat.split()
        found = False
        if not only_enabled or is_global_builtin_pattern(pat):
            found = True
        else: # find a mode that enables this builtin
            for m in modes:
                if m == mode or (include_autoenabled and mode_is_auto_enabled(m)):
                    if m in builtins_enabled and cmd in builtins_enabled[m]:
                        found = True
        if found: patterns.append((pat, f))

    acts = []
    longest, vars, bad, pattern, f = longest_matching_pattern(patterns, input, mode)
    if longest != 0:
        if not bad:
            acts = [(f, input[:longest])]
            if pattern == 'switch <mode>': mode = input[1]
                # this applies the mode switch /during/ command evaluation,
                # which is beyond the capabilities of regular built-ins,
                # since those only produce actions to be executed later.
                # hence this special case for the 'switch' command.

    elif input != []:
        cmd, *args = input
        if cmd == 'builtin':
            matched, bad, acts, newmode = handle_builtin_command(args, mode, False, False)
            matched += 1
            return (matched, bad, acts, newmode)

    return (longest, bad, acts, mode)

def process(words, mode, handle_builtins=True, include_autoenabled=True):
    # returns (n, missing, acts, newmode) where n is how many words were recognized, and acts is a list of actions

    if words == []: return (0, False, [], mode)
    cmd, *_ = words

    n, missing, acts, mode2 = handle_alias(words, mode, include_autoenabled)

    if handle_builtins:
        n2, m, a, mo = handle_builtin_command(words, mode, include_autoenabled)
        if n2 > n:
            n = n2
            missing = m
            acts = a
            mode2 = mo

    if missing:
        return (n, missing, acts, mode)
    if n != 0:
        m, missing, acts2, mode3 = process(words[n:], mode2, True, include_autoenabled)
        return (n + m, missing, acts + acts2, mode3)

    return (n, missing, [], mode)

# input preprocessing:

def replace_numbers(words, collected=''):
    if words == []: return ([collected] if collected != '' else [])
    first, *rest = words
    if first in numbers: return replace_numbers(rest, collected + numbers[first])
    if collected != '': return [collected, first] + replace_numbers(rest)
    return [first] + replace_numbers(rest)

def replace_words(words):
    if words == []: return []
    for i in range(0, len(words)):
        for k, vv in word_replacements.items():
            for v in vv:
                kw = v.split()
                if len(words) >= i + len(kw) and words[i:i+len(kw)] == kw:
                    return words[:i] + k.split() + replace_words(words[i+len(kw):])
    return words

def eval_command(words, line):
    if words == []: return
    if debug: print()

    handle_builtins = (mode != idle_mode)
    n, missing, acts, newmode = process(words, mode, handle_builtins, True)
    c = confirm_input(words, n, missing, newmode, line)
    actnames = [' '.join(w) for _, w in acts]
    if actnames != [] and (len(actnames) >= 2 or actnames[0] != ' '.join(words)):
        print(', '.join(actnames))
    for f, w in acts: f(*w)
    if c: clear_line()
    print_prompt()

async def process_lines(input):
    global mode
    loop = asyncio.get_event_loop()
    reader = asyncio.StreamReader(loop=loop, limit=asyncio.streams._DEFAULT_LIMIT)
    await loop.connect_read_pipe(
        lambda: asyncio.StreamReaderProtocol(reader, loop=loop), input)

    print_prompt()
    last_active_modes = get_active_modes(mode)

    while True:
        try:
            line = await asyncio.wait_for(reader.readline(), 0.5)
        except asyncio.TimeoutError:
            get_current_application()
            m = get_active_modes(mode)
            if last_active_modes != m:
                last_active_modes = m
                clear_line()
                print_prompt()
        else:
            if not line: break # EOF
            else:
                line = line.decode('utf-8').rstrip('\n')
                if line == '' or line[0] == '#' or line in ignore: continue

                load_config()

                words = replace_numbers(replace_words(line.split()))
                if len(words) > 0 and words[0] in ['the', 'a', 'i', 'and']:
                    words.pop(0)
                if words != []:
                    eval_command(words, line)
                    last_active_modes = get_active_modes(mode)

# output:

def indented_and_wrapped(l, n):
    cols = shutil.get_terminal_size().columns
    cur = n
    r = ''
    while l != []:
        (s, w) = l[0]
        if (cur + w <= cols) or r == '' or r.endswith('\n' + ' ' * n):
            cur += w
            r += s
            l = l[1:]
        else:
            r += '\n' + ' ' * n
            cur = n
    return r

def print_definition(mode, pattern):
    expansion = modes[mode][pattern]
    print('\nin', color_mode(mode) + ',',
        color_commands(pattern), '= ', end='')
    indent = len(mode) + len(pattern) + len("in ,  = ")
    l = [(color_commands(e) + ' ', len(e) + 1) for e in expansion.split()] # todo: handle '' args
    s, w = l[-1]; l[-1] = (s[:-1], w - 1) # remove last space
    print(indented_and_wrapped(l, indent), end='\n\n')

def sound(n, count=1, wait=True):
    if count == 0 or not sound_effects: return
    pygame.mixer.music.load("sounds/" + n)
    for i in range(0, count):
        pygame.mixer.music.play()
        if wait:
            while pygame.mixer.music.get_busy(): time.sleep(0.01)
            time.sleep(0.1)

def short_mode_name(mode):
    return (short_mode_names[mode] if mode in short_mode_names else mode)

def clear_line():
    cols = shutil.get_terminal_size().columns
    print('\r' + ' ' * cols + '\r', end='')
    sys.stdout.flush()

def print_prompt():
    modes = get_active_modes(mode)
    print(','.join(map(
        lambda s: color_mode(short_mode_name(s)),
        modes)) + '> ', end='')
    sys.stdout.flush()

def prompt_width():
    modes = get_active_modes(mode)
    return len(','.join(map(short_mode_name, modes)) + '> ')

def truncate(s, n):
    return (s[:n-3] + '...' if len(s) > n else s)

def confirm_input(words, n, missing, newmode, original_input):
    if n == 0:
        clear_line()
        print_prompt()
        cols = shutil.get_terminal_size().columns
        print(colored(truncate(original_input, cols - prompt_width()), 'yellow'), end='')
        print('\r',end='')
        sys.stdout.flush()
        return False
    clear_line()
    print_prompt()
    print(colored(' '.join(words[:n]), 'green'), end='')
    if n != len(words):
        if n != 0: print(' ', end='')
        print(colored(' '.join(words[n:]), 'red'), end='')
    elif missing != 0:
        print(colored(' <???>', 'red'), end='')
    print()

    sound('good.wav', n)
    if n != len(words) or missing != 0:
        sound('bad.wav', 1, wait=False)
    return True

def simple_subprocess(cmd):
    p = subprocess.Popen(cmd, shell=True,
        stdin=subprocess.PIPE, stdout=subprocess.PIPE, stderr=subprocess.PIPE)
    return p.stdout.read().decode('utf-8').rstrip()

def get_current_application():
    global current_windowtitle, current_windowpid, current_windowprocesses
    current_windowpid = ''
    current_windowtitle = ''
    current_windowprocesses = {}
    active_win = simple_subprocess('xdotool getactivewindow')
    if active_win == '': return
    current_windowtitle = simple_subprocess('xdotool getwindowname ' + active_win)
    current_windowpid = simple_subprocess('xdotool getwindowpid ' + active_win)
    if current_windowpid != '':
        current_windowprocesses = process_family(int(current_windowpid))

ERROR_HANDLER_FUNC = CFUNCTYPE(None, c_char_p, c_int, c_char_p, c_int, c_char_p)

def py_asound_error_handler(filename, line, function, err, fmt):
    pass

c_asound_error_handler = ERROR_HANDLER_FUNC(py_asound_error_handler)

@contextmanager
def noalsaerr():
    asound = cdll.LoadLibrary('libasound.so')
    asound.snd_lib_error_set_handler(c_asound_error_handler)
    yield
    asound.snd_lib_error_set_handler(None)

@click.command()
@click.option('--debug', default=False,type=bool)
@click.option('--volume', default=0.1, type=float) # default volume very low so our beeps are
                                                   # (a) non-obnoxious, and
                                                   # (b) won't interfere with speech recognition.
@click.argument('cmd', nargs=-1)
def evc(debug, volume, cmd):
    globals()['debug'] = debug
    initial_words = list(cmd)
    pygame.init()
    pygame.mixer.music.set_volume(volume)

    sys.stdout.write("\033[?25l") # hide cursor:

    load_config()

    with noalsaerr():
        if initial_words != []:
            eval_command(initial_words, ' '.join(initial_words))
        else:
            asyncio.get_event_loop().run_until_complete(process_lines(sys.stdin))

    sys.stdout.write("\033[?25h") # restore cursor

if __name__ == '__main__': evc()
